/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreatorType', 'model/PluginSource', 'model/PluginType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CreatorType'), require('./PluginSource'), require('./PluginType'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.Plugin = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.CreatorType, root.FortanixSdkmsRestApi.PluginSource, root.FortanixSdkmsRestApi.PluginType);
  }
}(this, function(ApiClient, CreatorType, PluginSource, PluginType) {
  'use strict';




  /**
   * The Plugin model module.
   * @module model/Plugin
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new <code>Plugin</code>.
   * @alias module:model/Plugin
   * @class
   * @param name {String} Name of the plugin. Plugin names must be unique within an account.
   * @param pluginId {String} Plugin ID uniquely identifying this plugin.
   * @param acctId {String} The account ID of the account that this plugin belongs to.
   * @param groups {Array.<String>} An array of security group IDs. The plugin belongs to each Security Group in this array.
   * @param defaultGroup {String} The default group of this plugin. This is the group where security objects will be created by default by this plugin.
   * @param source {module:model/PluginSource} 
   * @param enabled {Boolean} Whether this plugin is enabled.
   * @param pluginType {module:model/PluginType} 
   * @param regions {Array.<String>} The list of regions this plugin may run in.
   * @param creator {module:model/CreatorType} 
   * @param createdAt {String} When this plugin was created.
   * @param lastrunAt {String} When this plugin was last run.
   * @param lastupdatedAt {String} When this plugin was last updated.
   */
  var exports = function(name, pluginId, acctId, groups, defaultGroup, source, enabled, pluginType, regions, creator, createdAt, lastrunAt, lastupdatedAt) {
    var _this = this;

    _this['name'] = name;
    _this['plugin_id'] = pluginId;

    _this['acct_id'] = acctId;
    _this['groups'] = groups;
    _this['default_group'] = defaultGroup;
    _this['source'] = source;
    _this['enabled'] = enabled;
    _this['plugin_type'] = pluginType;
    _this['regions'] = regions;
    _this['creator'] = creator;
    _this['created_at'] = createdAt;
    _this['lastrun_at'] = lastrunAt;
    _this['lastupdated_at'] = lastupdatedAt;
  };

  /**
   * Constructs a <code>Plugin</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Plugin} obj Optional instance to populate.
   * @return {module:model/Plugin} The populated <code>Plugin</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('plugin_id')) {
        obj['plugin_id'] = ApiClient.convertToType(data['plugin_id'], 'String');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('acct_id')) {
        obj['acct_id'] = ApiClient.convertToType(data['acct_id'], 'String');
      }
      if (data.hasOwnProperty('groups')) {
        obj['groups'] = ApiClient.convertToType(data['groups'], ['String']);
      }
      if (data.hasOwnProperty('default_group')) {
        obj['default_group'] = ApiClient.convertToType(data['default_group'], 'String');
      }
      if (data.hasOwnProperty('source')) {
        obj['source'] = PluginSource.constructFromObject(data['source']);
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('plugin_type')) {
        obj['plugin_type'] = PluginType.constructFromObject(data['plugin_type']);
      }
      if (data.hasOwnProperty('regions')) {
        obj['regions'] = ApiClient.convertToType(data['regions'], ['String']);
      }
      if (data.hasOwnProperty('creator')) {
        obj['creator'] = CreatorType.constructFromObject(data['creator']);
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
      }
      if (data.hasOwnProperty('lastrun_at')) {
        obj['lastrun_at'] = ApiClient.convertToType(data['lastrun_at'], 'String');
      }
      if (data.hasOwnProperty('lastupdated_at')) {
        obj['lastupdated_at'] = ApiClient.convertToType(data['lastupdated_at'], 'String');
      }
    }
    return obj;
  }

  /**
   * Name of the plugin. Plugin names must be unique within an account.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Plugin ID uniquely identifying this plugin.
   * @member {String} plugin_id
   */
  exports.prototype['plugin_id'] = undefined;
  /**
   * Description of this plugin.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The account ID of the account that this plugin belongs to.
   * @member {String} acct_id
   */
  exports.prototype['acct_id'] = undefined;
  /**
   * An array of security group IDs. The plugin belongs to each Security Group in this array.
   * @member {Array.<String>} groups
   */
  exports.prototype['groups'] = undefined;
  /**
   * The default group of this plugin. This is the group where security objects will be created by default by this plugin.
   * @member {String} default_group
   */
  exports.prototype['default_group'] = undefined;
  /**
   * @member {module:model/PluginSource} source
   */
  exports.prototype['source'] = undefined;
  /**
   * Whether this plugin is enabled.
   * @member {Boolean} enabled
   */
  exports.prototype['enabled'] = undefined;
  /**
   * @member {module:model/PluginType} plugin_type
   */
  exports.prototype['plugin_type'] = undefined;
  /**
   * The list of regions this plugin may run in.
   * @member {Array.<String>} regions
   */
  exports.prototype['regions'] = undefined;
  /**
   * @member {module:model/CreatorType} creator
   */
  exports.prototype['creator'] = undefined;
  /**
   * When this plugin was created.
   * @member {String} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * When this plugin was last run.
   * @member {String} lastrun_at
   */
  exports.prototype['lastrun_at'] = undefined;
  /**
   * When this plugin was last updated.
   * @member {String} lastupdated_at
   */
  exports.prototype['lastupdated_at'] = undefined;



  return exports;
}));


