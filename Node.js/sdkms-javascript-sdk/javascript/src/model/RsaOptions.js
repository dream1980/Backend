/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RsaEncryptionPolicy', 'model/RsaSignaturePolicy'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./RsaEncryptionPolicy'), require('./RsaSignaturePolicy'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.RsaOptions = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.RsaEncryptionPolicy, root.FortanixSdkmsRestApi.RsaSignaturePolicy);
  }
}(this, function(ApiClient, RsaEncryptionPolicy, RsaSignaturePolicy) {
  'use strict';




  /**
   * The RsaOptions model module.
   * @module model/RsaOptions
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new <code>RsaOptions</code>.
   * RSA-specific options.
   * @alias module:model/RsaOptions
   * @class
   * @param encryptionPolicy {Array.<module:model/RsaEncryptionPolicy>} Encryption policy for this RSA key. When doing an encryption or key wrapping operation, the policies are evaluated against the specified parameters one by one. If one matches, the operation is allowed. If none match, including if the policy list is empty, the operation is disallowed. Missing optional parameters will have their defaults specified according to the matched policy. The default for new keys is `[{\"padding\":{\"OAEP\":{}}]`. If (part of) a constraint is not specified, anything is allowed for that constraint. To impose no constraints, specify `[{}]`. 
   */
  var exports = function(encryptionPolicy) {
    var _this = this;



    _this['encryption_policy'] = encryptionPolicy;

  };

  /**
   * Constructs a <code>RsaOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RsaOptions} obj Optional instance to populate.
   * @return {module:model/RsaOptions} The populated <code>RsaOptions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('key_size')) {
        obj['key_size'] = ApiClient.convertToType(data['key_size'], 'Number');
      }
      if (data.hasOwnProperty('public_exponent')) {
        obj['public_exponent'] = ApiClient.convertToType(data['public_exponent'], 'Number');
      }
      if (data.hasOwnProperty('encryption_policy')) {
        obj['encryption_policy'] = ApiClient.convertToType(data['encryption_policy'], [RsaEncryptionPolicy]);
      }
      if (data.hasOwnProperty('signature_policy')) {
        obj['signature_policy'] = ApiClient.convertToType(data['signature_policy'], [RsaSignaturePolicy]);
      }
    }
    return obj;
  }

  /**
   * Specify on Create only. Returned on Get. Size in bits (not bytes) of the RSA key.
   * @member {Number} key_size
   */
  exports.prototype['key_size'] = undefined;
  /**
   * Specify on Create only. Public exponent to use for generating the RSA key.
   * @member {Number} public_exponent
   */
  exports.prototype['public_exponent'] = undefined;
  /**
   * Encryption policy for this RSA key. When doing an encryption or key wrapping operation, the policies are evaluated against the specified parameters one by one. If one matches, the operation is allowed. If none match, including if the policy list is empty, the operation is disallowed. Missing optional parameters will have their defaults specified according to the matched policy. The default for new keys is `[{\"padding\":{\"OAEP\":{}}]`. If (part of) a constraint is not specified, anything is allowed for that constraint. To impose no constraints, specify `[{}]`. 
   * @member {Array.<module:model/RsaEncryptionPolicy>} encryption_policy
   */
  exports.prototype['encryption_policy'] = undefined;
  /**
   * Signature policy for this RSA key. When doing a signature operation, the policies are evaluated against the specified parameters one by one. If one matches, the operation is allowed. If none match, including if the policy list is empty, the operation is disallowed. Missing optional parameters will have their defaults specified according to the matched policy. The default for new keys is `[{}]` (no constraints). If (part of) a constraint is not specified, anything is allowed for that constraint. 
   * @member {Array.<module:model/RsaSignaturePolicy>} signature_policy
   */
  exports.prototype['signature_policy'] = undefined;



  return exports;
}));


