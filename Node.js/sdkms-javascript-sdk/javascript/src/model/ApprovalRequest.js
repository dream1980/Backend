/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApprovalStatus', 'model/ApprovalSubject', 'model/Entity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ApprovalStatus'), require('./ApprovalSubject'), require('./Entity'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.ApprovalRequest = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.ApprovalStatus, root.FortanixSdkmsRestApi.ApprovalSubject, root.FortanixSdkmsRestApi.Entity);
  }
}(this, function(ApiClient, ApprovalStatus, ApprovalSubject, Entity) {
  'use strict';




  /**
   * The ApprovalRequest model module.
   * @module model/ApprovalRequest
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new <code>ApprovalRequest</code>.
   * @alias module:model/ApprovalRequest
   * @class
   * @param requestId {String} UUID uniquely identifying this approval request.
   * @param requester {module:model/Entity} 
   * @param createdAt {String} When this approval request was created.
   * @param acctId {String} The account ID of the account that this approval request belongs to.
   * @param operation {String} Operation URL path, e.g. `/crypto/v1/keys`, `/crypto/v1/groups/<id>`.
   * @param method {String} Method for the operation: POST, PATCH, PUT, DELETE, or GET. Default is POST. 
   * @param body {Object} 
   * @param approvers {Array.<module:model/Entity>} 
   * @param denier {module:model/Entity} 
   * @param status {module:model/ApprovalStatus} 
   * @param reviewers {Array.<module:model/Entity>} 
   * @param subjects {Array.<module:model/ApprovalSubject>} 
   * @param expiry {String} When this approval request expires.
   */
  var exports = function(requestId, requester, createdAt, acctId, operation, method, body, approvers, denier, status, reviewers, subjects, expiry) {
    var _this = this;

    _this['request_id'] = requestId;
    _this['requester'] = requester;
    _this['created_at'] = createdAt;
    _this['acct_id'] = acctId;
    _this['operation'] = operation;
    _this['method'] = method;
    _this['body'] = body;
    _this['approvers'] = approvers;
    _this['denier'] = denier;
    _this['status'] = status;
    _this['reviewers'] = reviewers;
    _this['subjects'] = subjects;

    _this['expiry'] = expiry;
  };

  /**
   * Constructs a <code>ApprovalRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ApprovalRequest} obj Optional instance to populate.
   * @return {module:model/ApprovalRequest} The populated <code>ApprovalRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('request_id')) {
        obj['request_id'] = ApiClient.convertToType(data['request_id'], 'String');
      }
      if (data.hasOwnProperty('requester')) {
        obj['requester'] = Entity.constructFromObject(data['requester']);
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
      }
      if (data.hasOwnProperty('acct_id')) {
        obj['acct_id'] = ApiClient.convertToType(data['acct_id'], 'String');
      }
      if (data.hasOwnProperty('operation')) {
        obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
      }
      if (data.hasOwnProperty('method')) {
        obj['method'] = ApiClient.convertToType(data['method'], 'String');
      }
      if (data.hasOwnProperty('body')) {
        obj['body'] = ApiClient.convertToType(data['body'], Object);
      }
      if (data.hasOwnProperty('approvers')) {
        obj['approvers'] = ApiClient.convertToType(data['approvers'], [Entity]);
      }
      if (data.hasOwnProperty('denier')) {
        obj['denier'] = Entity.constructFromObject(data['denier']);
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApprovalStatus.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('reviewers')) {
        obj['reviewers'] = ApiClient.convertToType(data['reviewers'], [Entity]);
      }
      if (data.hasOwnProperty('subjects')) {
        obj['subjects'] = ApiClient.convertToType(data['subjects'], [ApprovalSubject]);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('expiry')) {
        obj['expiry'] = ApiClient.convertToType(data['expiry'], 'String');
      }
    }
    return obj;
  }

  /**
   * UUID uniquely identifying this approval request.
   * @member {String} request_id
   */
  exports.prototype['request_id'] = undefined;
  /**
   * @member {module:model/Entity} requester
   */
  exports.prototype['requester'] = undefined;
  /**
   * When this approval request was created.
   * @member {String} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * The account ID of the account that this approval request belongs to.
   * @member {String} acct_id
   */
  exports.prototype['acct_id'] = undefined;
  /**
   * Operation URL path, e.g. `/crypto/v1/keys`, `/crypto/v1/groups/<id>`.
   * @member {String} operation
   */
  exports.prototype['operation'] = undefined;
  /**
   * Method for the operation: POST, PATCH, PUT, DELETE, or GET. Default is POST. 
   * @member {String} method
   */
  exports.prototype['method'] = undefined;
  /**
   * @member {Object} body
   */
  exports.prototype['body'] = undefined;
  /**
   * @member {Array.<module:model/Entity>} approvers
   */
  exports.prototype['approvers'] = undefined;
  /**
   * @member {module:model/Entity} denier
   */
  exports.prototype['denier'] = undefined;
  /**
   * @member {module:model/ApprovalStatus} status
   */
  exports.prototype['status'] = undefined;
  /**
   * @member {Array.<module:model/Entity>} reviewers
   */
  exports.prototype['reviewers'] = undefined;
  /**
   * @member {Array.<module:model/ApprovalSubject>} subjects
   */
  exports.prototype['subjects'] = undefined;
  /**
   * Optional comment about the approval request for the reviewer.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * When this approval request expires.
   * @member {String} expiry
   */
  exports.prototype['expiry'] = undefined;



  return exports;
}));


