/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CryptMode', 'model/ObjectType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./CryptMode'), require('./ObjectType'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.DecryptRequest = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.CryptMode, root.FortanixSdkmsRestApi.ObjectType);
  }
}(this, function(ApiClient, CryptMode, ObjectType) {
  'use strict';




  /**
   * The DecryptRequest model module.
   * @module model/DecryptRequest
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new <code>DecryptRequest</code>.
   * Mode and iv are required fields for symmetric key algorithms and ad and tag are required fields for GCM or CCM modes.
   * @alias module:model/DecryptRequest
   * @class
   * @param cipher {Blob} The ciphertext to decrypt.
   */
  var exports = function(cipher) {
    var _this = this;


    _this['cipher'] = cipher;




  };

  /**
   * Constructs a <code>DecryptRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/DecryptRequest} obj Optional instance to populate.
   * @return {module:model/DecryptRequest} The populated <code>DecryptRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('alg')) {
        obj['alg'] = ObjectType.constructFromObject(data['alg']);
      }
      if (data.hasOwnProperty('cipher')) {
        obj['cipher'] = ApiClient.convertToType(data['cipher'], 'Blob');
      }
      if (data.hasOwnProperty('mode')) {
        obj['mode'] = CryptMode.constructFromObject(data['mode']);
      }
      if (data.hasOwnProperty('iv')) {
        obj['iv'] = ApiClient.convertToType(data['iv'], 'Blob');
      }
      if (data.hasOwnProperty('ad')) {
        obj['ad'] = ApiClient.convertToType(data['ad'], 'Blob');
      }
      if (data.hasOwnProperty('tag')) {
        obj['tag'] = ApiClient.convertToType(data['tag'], 'Blob');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/ObjectType} alg
   */
  exports.prototype['alg'] = undefined;
  /**
   * The ciphertext to decrypt.
   * @member {Blob} cipher
   */
  exports.prototype['cipher'] = undefined;
  /**
   * @member {module:model/CryptMode} mode
   */
  exports.prototype['mode'] = undefined;
  /**
   * The initialization value used to encrypt this ciphertext. This field is required for symmetric ciphers, and ignored for asymmetric ciphers. 
   * @member {Blob} iv
   */
  exports.prototype['iv'] = undefined;
  /**
   * The authenticated data used with this ciphertext and authentication tag. This field is required for symmetric ciphers using cipher mode GCM or CCM, and must not be specified for all other ciphers. 
   * @member {Blob} ad
   */
  exports.prototype['ad'] = undefined;
  /**
   * The authentication tag used with this ciphertext and authenticated data. This field is required for symmetric ciphers using cipher mode GCM or CCM, and must not be specified for all other ciphers. 
   * @member {Blob} tag
   */
  exports.prototype['tag'] = undefined;



  return exports;
}));


