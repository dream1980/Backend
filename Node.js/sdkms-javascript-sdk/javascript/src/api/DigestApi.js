/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DigestRequest', 'model/DigestResponse', 'model/Error', 'model/MacGenerateRequest', 'model/MacGenerateRequestEx', 'model/MacGenerateResponse', 'model/MacVerifyRequest', 'model/MacVerifyRequestEx', 'model/MacVerifyResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DigestRequest'), require('../model/DigestResponse'), require('../model/Error'), require('../model/MacGenerateRequest'), require('../model/MacGenerateRequestEx'), require('../model/MacGenerateResponse'), require('../model/MacVerifyRequest'), require('../model/MacVerifyRequestEx'), require('../model/MacVerifyResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.DigestApi = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.DigestRequest, root.FortanixSdkmsRestApi.DigestResponse, root.FortanixSdkmsRestApi.Error, root.FortanixSdkmsRestApi.MacGenerateRequest, root.FortanixSdkmsRestApi.MacGenerateRequestEx, root.FortanixSdkmsRestApi.MacGenerateResponse, root.FortanixSdkmsRestApi.MacVerifyRequest, root.FortanixSdkmsRestApi.MacVerifyRequestEx, root.FortanixSdkmsRestApi.MacVerifyResponse);
  }
}(this, function(ApiClient, DigestRequest, DigestResponse, Error, MacGenerateRequest, MacGenerateRequestEx, MacGenerateResponse, MacVerifyRequest, MacVerifyRequestEx, MacVerifyResponse) {
  'use strict';

  /**
   * Digest service.
   * @module api/DigestApi
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new DigestApi. 
   * @alias module:api/DigestApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the computeDigest operation.
     * @callback module:api/DigestApi~computeDigestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DigestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute a message digest of data
     * This returns the digest of data provided in request body using the algorithm specified in request body. Maximum size of request body supported is 512KB. 
     * @param {module:model/DigestRequest} body Digest request
     * @param {module:api/DigestApi~computeDigestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DigestResponse}
     */
    this.computeDigest = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling computeDigest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DigestResponse;

      return this.apiClient.callApi(
        '/crypto/v1/digest', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the computeMac operation.
     * @callback module:api/DigestApi~computeMacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MacGenerateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute MAC using a key
     * Compute a cryptographic Message Authentication Code on a message using a symmetric key. The key must have the MACGenerate operation enabled. Asymmetric keys may not be used to generate MACs. They can be used with the sign and verify operations. 
     * @param {String} keyId kid of security object
     * @param {module:model/MacGenerateRequest} body MAC generation request
     * @param {module:api/DigestApi~computeMacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MacGenerateResponse}
     */
    this.computeMac = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling computeMac");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling computeMac");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MacGenerateResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/mac', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the computeMacEx operation.
     * @callback module:api/DigestApi~computeMacExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MacGenerateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compute MAC using a key
     * Compute a cryptographic Message Authentication Code on a message using a symmetric key. The key must have the MACGenerate operation enabled. Asymmetric keys may not be used to generate MACs. They can be used with the sign and verify operations. 
     * @param {module:model/MacGenerateRequestEx} body MAC generation request
     * @param {module:api/DigestApi~computeMacExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MacGenerateResponse}
     */
    this.computeMacEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling computeMacEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MacGenerateResponse;

      return this.apiClient.callApi(
        '/crypto/v1/mac', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyMac operation.
     * @callback module:api/DigestApi~verifyMacCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MacVerifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify MAC using a key
     * The data to be MACed, the algorithm, and a pre-computed MAC are provided in the request body, and the key id is provided in the URL. SDKMS computes the MAC of the data and compares it with the specified MAC, and returns the outcome of the MAC verification in the response body. Maximum size of request body supported is 512KB. Supported digest algorithms are - SHA1, SHA256, SHA384, and SHA512.             
     * @param {String} keyId kid of security object
     * @param {module:model/MacVerifyRequest} body MAC Verify request
     * @param {module:api/DigestApi~verifyMacCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MacVerifyResponse}
     */
    this.verifyMac = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling verifyMac");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyMac");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MacVerifyResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/macverify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyMacEx operation.
     * @callback module:api/DigestApi~verifyMacExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MacVerifyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify MAC using a key
     * The data to be MACed, the algorithm, and a pre-computed MAC are provided in the request body, and the key id is provided in the URL. SDKMS computes the MAC of the data and compares it with the specified MAC, and returns the outcome of the MAC verification in the response body. Maximum size of request body supported is 512KB. Supported digest algorithms are - SHA1, SHA256, SHA384, and SHA512. 
     * @param {module:model/MacVerifyRequestEx} body MAC Verify request
     * @param {module:api/DigestApi~verifyMacExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MacVerifyResponse}
     */
    this.verifyMacEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling verifyMacEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MacVerifyResponse;

      return this.apiClient.callApi(
        '/crypto/v1/macverify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
