/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuthResponse', 'model/Error', 'model/SelectAccountRequest', 'model/SelectAccountResponse', 'model/VersionResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuthResponse'), require('../model/Error'), require('../model/SelectAccountRequest'), require('../model/SelectAccountResponse'), require('../model/VersionResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.AuthenticationApi = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.AuthResponse, root.FortanixSdkmsRestApi.Error, root.FortanixSdkmsRestApi.SelectAccountRequest, root.FortanixSdkmsRestApi.SelectAccountResponse, root.FortanixSdkmsRestApi.VersionResponse);
  }
}(this, function(ApiClient, AuthResponse, Error, SelectAccountRequest, SelectAccountResponse, VersionResponse) {
  'use strict';

  /**
   * Authentication service.
   * @module api/AuthenticationApi
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new AuthenticationApi. 
   * @alias module:api/AuthenticationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the authorize operation.
     * @callback module:api/AuthenticationApi~authorizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a session for a user or an app
     * Authenticate a user or an app to SDKMS to begin a session. The caller needs to provide a basic authentication token to authenticate to SDKMS. The response body contains a bearer authentication token which needs to be provided by subsequent calls for the duration of the session. 
     * @param {module:api/AuthenticationApi~authorizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthResponse}
     */
    this.authorize = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['basicAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AuthResponse;

      return this.apiClient.callApi(
        '/sys/v1/session/auth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkHealth operation.
     * @callback module:api/AuthenticationApi~checkHealthCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check whether the server is handling requests
     * Returns a 200-class status code if the server is handling requests, or a 500-class status code if the server is having problems. 
     * @param {module:api/AuthenticationApi~checkHealthCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.checkHealth = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sys/v1/health', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerVersion operation.
     * @callback module:api/AuthenticationApi~getServerVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SDKMS version information
     * Returns information about the  SDKMS server version and the client API version that it supports. 
     * @param {module:api/AuthenticationApi~getServerVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VersionResponse}
     */
    this.getServerVersion = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = VersionResponse;

      return this.apiClient.callApi(
        '/sys/v1/version', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the selectAccount operation.
     * @callback module:api/AuthenticationApi~selectAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SelectAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Select a user&#39;s account to work on
     * Select one of user&#39;s account to proceed. This is applicable when a user is associated with more than one account. The caller needs to provide a bearer token for the session in the request body. 
     * @param {module:model/SelectAccountRequest} body Select Account Request
     * @param {module:api/AuthenticationApi~selectAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SelectAccountResponse}
     */
    this.selectAccount = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling selectAccount");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SelectAccountResponse;

      return this.apiClient.callApi(
        '/sys/v1/session/select_account', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the terminate operation.
     * @callback module:api/AuthenticationApi~terminateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminate a session
     * Terminate an authenticated session. After this call, the provided bearer authentication token will be invalidated and cannot be used to make any further API calls. 
     * @param {module:api/AuthenticationApi~terminateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.terminate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sys/v1/session/terminate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unlock2F operation.
     * @callback module:api/AuthenticationApi~unlock2FCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlock two factor configuration
     * Re-authenticate to unlock two factor configuration. Two factor configuration must be unlocked to enable or disable two factor authentication, add or remove two factor devices, or regenerate recovery codes. The caller needs to provide a bearer token for the session in the request body. 
     * @param {module:api/AuthenticationApi~unlock2FCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.unlock2F = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sys/v1/session/config_2fa/auth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
