/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AuditLogResponse', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AuditLogResponse'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.LogsApi = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.AuditLogResponse, root.FortanixSdkmsRestApi.Error);
  }
}(this, function(ApiClient, AuditLogResponse, Error) {
  'use strict';

  /**
   * Logs service.
   * @module api/LogsApi
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new LogsApi. 
   * @alias module:api/LogsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAuditLogs operation.
     * @callback module:api/LogsApi~getAuditLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditLogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get audit logs
     * Get audit log entries matching the requested filters.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size Maximum number of entries to return
     * @param {Number} opts.from For pagination, starting offset
     * @param {module:model/String} opts.actionType Event action type
     * @param {module:model/String} opts.actorType Event actor type
     * @param {String} opts.actorId Actor (User or App) Identifier
     * @param {String} opts.objectId Object (User or App) Identifier for event
     * @param {module:model/String} opts.severity Event severity type
     * @param {Number} opts.rangeFrom Starting time for search , this is EPOCH value
     * @param {Number} opts.rangeTo Ending time for search , this is EPOCH value
     * @param {module:api/LogsApi~getAuditLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditLogResponse}
     */
    this.getAuditLogs = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'size': opts['size'],
        'from': opts['from'],
        'action_type': opts['actionType'],
        'actor_type': opts['actorType'],
        'actor_id': opts['actorId'],
        'object_id': opts['objectId'],
        'severity': opts['severity'],
        'range_from': opts['rangeFrom'],
        'range_to': opts['rangeTo'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AuditLogResponse;

      return this.apiClient.callApi(
        '/sys/v1/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
