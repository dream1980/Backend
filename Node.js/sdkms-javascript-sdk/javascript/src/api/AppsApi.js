/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/App', 'model/AppCredentialResponse', 'model/AppRequest', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/App'), require('../model/AppCredentialResponse'), require('../model/AppRequest'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.AppsApi = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.App, root.FortanixSdkmsRestApi.AppCredentialResponse, root.FortanixSdkmsRestApi.AppRequest, root.FortanixSdkmsRestApi.Error);
  }
}(this, function(ApiClient, App, AppCredentialResponse, AppRequest, Error) {
  'use strict';

  /**
   * Apps service.
   * @module api/AppsApi
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new AppsApi. 
   * @alias module:api/AppsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/AppsApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new application
     * Create a new application with the specified properties.
     * @param {module:model/AppRequest} body Properties of application to create
     * @param {module:api/AppsApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    this.createApp = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createApp");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/sys/v1/apps', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/AppsApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete application
     * Remove an application from SDKMS.
     * @param {String} appId Application Identifier
     * @param {module:api/AppsApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApp = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteApp");
      }


      var pathParams = {
        'app-id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/sys/v1/apps/{app-id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/AppsApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific application
     * Look up an application by application ID.
     * @param {String} appId Application Identifier
     * @param {module:api/AppsApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    this.getApp = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getApp");
      }


      var pathParams = {
        'app-id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/sys/v1/apps/{app-id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApps operation.
     * @callback module:api/AppsApi~getAppsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/App>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all applications
     * Get details of all applications the current user has access to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupId Only retrieve applications in the specified group.
     * @param {String} opts.sort This specifies the property (&#x60;app_id&#x60; only, for now) and order (ascending or descending) with which to sort the apps. By default, apps are sorted by &#x60;app_id&#x60; in ascending order. The syntax is \&quot;&lt;property&gt;:[asc|desc]\&quot; (e.g. \&quot;app_id:desc\&quot;) or just \&quot;&lt;property&gt;\&quot; (ascending order by default). 
     * @param {String} opts.start If provided, this must be a value of the property specified in &#x60;sort&#x60;. Returned apps will begin just above or just below this value (for asc/desc order resp.). 
     * @param {Number} opts.limit Maximum number of apps to return. If not provided, the limit is 100.
     * @param {Number} opts.offset Number of apps past &#x60;start&#x60; to skip.
     * @param {module:api/AppsApi~getAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/App>}
     */
    this.getApps = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'group_id': opts['groupId'],
        'sort': opts['sort'],
        'start': opts['start'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [App];

      return this.apiClient.callApi(
        '/sys/v1/apps', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCredential operation.
     * @callback module:api/AppsApi~getCredentialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppCredentialResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific application&#39;s credential
     * Retrieve the authentication credential (API key or certificate) for a particular application. Only users who are an administrator of at least one of the application&#39;s groups can retrieve the credential.
     * @param {String} appId Application Identifier
     * @param {module:api/AppsApi~getCredentialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppCredentialResponse}
     */
    this.getCredential = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getCredential");
      }


      var pathParams = {
        'app-id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = AppCredentialResponse;

      return this.apiClient.callApi(
        '/sys/v1/apps/{app-id}/credential', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateApiKey operation.
     * @callback module:api/AppsApi~regenerateApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate API key
     * Create a new API key for an application. An application may only have one valid API key at a time, so performing this action will invalidate all old API keys. This does not invalidate existing sessions, so any applications with an existing open session will be able to continue operating with their old session until those sessions expire. 
     * @param {String} appId Application Identifier
     * @param {module:api/AppsApi~regenerateApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    this.regenerateApiKey = function(appId, callback) {
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling regenerateApiKey");
      }


      var pathParams = {
        'app-id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/sys/v1/apps/{app-id}/reset_secret', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/AppsApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an application
     * Change an application&#39;s properties, such as name, description, or group membership.
     * @param {String} appId Application Identifier
     * @param {module:model/AppRequest} body Properties of application to create
     * @param {module:api/AppsApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    this.updateApp = function(appId, body, callback) {
      var postBody = body;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApp");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApp");
      }


      var pathParams = {
        'app-id': appId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/sys/v1/apps/{app-id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
