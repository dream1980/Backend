/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/KeyObject', 'model/UnwrapKeyRequest', 'model/UnwrapKeyRequestEx', 'model/WrapKeyRequest', 'model/WrapKeyRequestEx', 'model/WrapKeyResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/KeyObject'), require('../model/UnwrapKeyRequest'), require('../model/UnwrapKeyRequestEx'), require('../model/WrapKeyRequest'), require('../model/WrapKeyRequestEx'), require('../model/WrapKeyResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.WrappingAndUnwrappingApi = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.Error, root.FortanixSdkmsRestApi.KeyObject, root.FortanixSdkmsRestApi.UnwrapKeyRequest, root.FortanixSdkmsRestApi.UnwrapKeyRequestEx, root.FortanixSdkmsRestApi.WrapKeyRequest, root.FortanixSdkmsRestApi.WrapKeyRequestEx, root.FortanixSdkmsRestApi.WrapKeyResponse);
  }
}(this, function(ApiClient, Error, KeyObject, UnwrapKeyRequest, UnwrapKeyRequestEx, WrapKeyRequest, WrapKeyRequestEx, WrapKeyResponse) {
  'use strict';

  /**
   * WrappingAndUnwrapping service.
   * @module api/WrappingAndUnwrappingApi
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new WrappingAndUnwrappingApi. 
   * @alias module:api/WrappingAndUnwrappingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the unwrapKey operation.
     * @callback module:api/WrappingAndUnwrappingApi~unwrapKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unwrap a security object with a key
     * Unwrap (decrypt) a wrapped key and import it into SDKMS. This allows securely importing into SDKMS security objects that were previously wrapped by SDKMS or another key management system. A new security object will be created in SDKMS with the unwrapped data. &lt;br&gt; The key-id parameter in the URL specifies the key that will be used to unwrap the other security object. This key must have the unwrapkey operation enabled. &lt;br&gt; The alg and mode parameters specify the encryption algorithm and cipher mode being used by the unwrapping key. The obj_type parameter specifies the object type of the security object being unwrapped. The size or elliptic curve of the object being unwrapped does not need to be specified. 
     * @param {String} keyId kid of security object
     * @param {module:model/UnwrapKeyRequest} body Unwrap key request
     * @param {module:api/WrappingAndUnwrappingApi~unwrapKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyObject}
     */
    this.unwrapKey = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling unwrapKey");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unwrapKey");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = KeyObject;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/unwrapkey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unwrapKeyEx operation.
     * @callback module:api/WrappingAndUnwrappingApi~unwrapKeyExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unwrap a security object with a key
     * Unwrap (decrypt) a wrapped key and import it into SDKMS. This allows securely importing into SDKMS security objects that were previously wrapped by SDKMS or another key management system. A new security object will be created in SDKMS with the unwrapped data. &lt;br&gt; The key-id parameter in the URL specifies the key that will be used to unwrap the other security object. This key must have the unwrapkey operation enabled. &lt;br&gt; The alg and mode parameters specify the encryption algorithm and cipher mode being used by the unwrapping key. The obj_type parameter specifies the object type of the security object being unwrapped. The size or elliptic curve of the object being unwrapped does not need to be specified. 
     * @param {module:model/UnwrapKeyRequestEx} body Unwrap key request
     * @param {module:api/WrappingAndUnwrappingApi~unwrapKeyExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyObject}
     */
    this.unwrapKeyEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling unwrapKeyEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = KeyObject;

      return this.apiClient.callApi(
        '/crypto/v1/unwrapkey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the wrapKey operation.
     * @callback module:api/WrappingAndUnwrappingApi~wrapKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WrapKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wrap a security object with a key 
     * Wrap (encrypt) an existing security object with a key. This allows keys to be securely exported from SDKMS so they can be later imported into SDKMS or another key management system. &lt;br&gt; The key-id parameter in the URL specifies the key that will be used to wrap the other security object. The security object being wrapped is specified inside of the request body. &lt;br&gt; The alg and mode parameters specify the encryption algorithm and cipher mode being used for the wrapping key. The algorithm of the key being wrapped is not provided to this API call. &lt;br&gt; The key being wrapped must have the export operation enabled. The wrapping key must have the wrapkey operation enabled. &lt;br&gt; The following wrapping operations are supported:   * Symmetric keys, HMAC keys, opaque objects, and secret objects may be wrapped with symmetric or asymmetric keys.   * Asymmetric keys may be wrapped with symmetric keys. Wrapping an asymmetric key with an asymmetric key is not supported.  When wrapping with an asymmetric key, the wrapped object size must fit as plaintext for the wrapping key size and algorithm. 
     * @param {String} keyId kid of security object
     * @param {module:model/WrapKeyRequest} body Wrap key request
     * @param {module:api/WrappingAndUnwrappingApi~wrapKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WrapKeyResponse}
     */
    this.wrapKey = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling wrapKey");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling wrapKey");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WrapKeyResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/wrapkey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the wrapKeyEx operation.
     * @callback module:api/WrappingAndUnwrappingApi~wrapKeyExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WrapKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wrap a security object with a key 
     * Wrap (encrypt) an existing security object with a key. This allows keys to be securely exported from SDKMS so they can be later imported into SDKMS or another key management system. &lt;br&gt; The key-id parameter in the URL specifies the key that will be used to wrap the other security object. The security object being wrapped is specified inside of the request body. &lt;br&gt; The alg and mode parameters specify the encryption algorithm and cipher mode being used for the wrapping key. The algorithm of the key being wrapped is not provided to this API call. &lt;br&gt; The key being wrapped must have the export operation enabled. The wrapping key must have the wrapkey operation enabled. &lt;br&gt; The following wrapping operations are supported:   * Symmetric keys, HMAC keys, opaque objects, and secret objects may be wrapped with symmetric or asymmetric keys.   * Asymmetric keys may be wrapped with symmetric keys. Wrapping an asymmetric key with an asymmetric key is not supported.  When wrapping with an asymmetric key, the wrapped object size must fit as plaintext for the wrapping key size and algorithm. 
     * @param {module:model/WrapKeyRequestEx} body Wrap key request
     * @param {module:api/WrappingAndUnwrappingApi~wrapKeyExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WrapKeyResponse}
     */
    this.wrapKeyEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling wrapKeyEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = WrapKeyResponse;

      return this.apiClient.callApi(
        '/crypto/v1/wrapkey', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
