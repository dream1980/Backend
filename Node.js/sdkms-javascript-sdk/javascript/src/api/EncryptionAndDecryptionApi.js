/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BatchDecryptRequest', 'model/BatchDecryptResponse', 'model/BatchEncryptRequest', 'model/BatchEncryptResponse', 'model/DecryptFinalRequest', 'model/DecryptFinalRequestEx', 'model/DecryptFinalResponse', 'model/DecryptInitRequest', 'model/DecryptInitRequestEx', 'model/DecryptInitResponse', 'model/DecryptRequest', 'model/DecryptRequestEx', 'model/DecryptResponse', 'model/DecryptUpdateRequest', 'model/DecryptUpdateRequestEx', 'model/DecryptUpdateResponse', 'model/EncryptFinalRequest', 'model/EncryptFinalRequestEx', 'model/EncryptFinalResponse', 'model/EncryptInitRequest', 'model/EncryptInitRequestEx', 'model/EncryptInitResponse', 'model/EncryptRequest', 'model/EncryptRequestEx', 'model/EncryptResponse', 'model/EncryptUpdateRequest', 'model/EncryptUpdateRequestEx', 'model/EncryptUpdateResponse', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BatchDecryptRequest'), require('../model/BatchDecryptResponse'), require('../model/BatchEncryptRequest'), require('../model/BatchEncryptResponse'), require('../model/DecryptFinalRequest'), require('../model/DecryptFinalRequestEx'), require('../model/DecryptFinalResponse'), require('../model/DecryptInitRequest'), require('../model/DecryptInitRequestEx'), require('../model/DecryptInitResponse'), require('../model/DecryptRequest'), require('../model/DecryptRequestEx'), require('../model/DecryptResponse'), require('../model/DecryptUpdateRequest'), require('../model/DecryptUpdateRequestEx'), require('../model/DecryptUpdateResponse'), require('../model/EncryptFinalRequest'), require('../model/EncryptFinalRequestEx'), require('../model/EncryptFinalResponse'), require('../model/EncryptInitRequest'), require('../model/EncryptInitRequestEx'), require('../model/EncryptInitResponse'), require('../model/EncryptRequest'), require('../model/EncryptRequestEx'), require('../model/EncryptResponse'), require('../model/EncryptUpdateRequest'), require('../model/EncryptUpdateRequestEx'), require('../model/EncryptUpdateResponse'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.FortanixSdkmsRestApi) {
      root.FortanixSdkmsRestApi = {};
    }
    root.FortanixSdkmsRestApi.EncryptionAndDecryptionApi = factory(root.FortanixSdkmsRestApi.ApiClient, root.FortanixSdkmsRestApi.BatchDecryptRequest, root.FortanixSdkmsRestApi.BatchDecryptResponse, root.FortanixSdkmsRestApi.BatchEncryptRequest, root.FortanixSdkmsRestApi.BatchEncryptResponse, root.FortanixSdkmsRestApi.DecryptFinalRequest, root.FortanixSdkmsRestApi.DecryptFinalRequestEx, root.FortanixSdkmsRestApi.DecryptFinalResponse, root.FortanixSdkmsRestApi.DecryptInitRequest, root.FortanixSdkmsRestApi.DecryptInitRequestEx, root.FortanixSdkmsRestApi.DecryptInitResponse, root.FortanixSdkmsRestApi.DecryptRequest, root.FortanixSdkmsRestApi.DecryptRequestEx, root.FortanixSdkmsRestApi.DecryptResponse, root.FortanixSdkmsRestApi.DecryptUpdateRequest, root.FortanixSdkmsRestApi.DecryptUpdateRequestEx, root.FortanixSdkmsRestApi.DecryptUpdateResponse, root.FortanixSdkmsRestApi.EncryptFinalRequest, root.FortanixSdkmsRestApi.EncryptFinalRequestEx, root.FortanixSdkmsRestApi.EncryptFinalResponse, root.FortanixSdkmsRestApi.EncryptInitRequest, root.FortanixSdkmsRestApi.EncryptInitRequestEx, root.FortanixSdkmsRestApi.EncryptInitResponse, root.FortanixSdkmsRestApi.EncryptRequest, root.FortanixSdkmsRestApi.EncryptRequestEx, root.FortanixSdkmsRestApi.EncryptResponse, root.FortanixSdkmsRestApi.EncryptUpdateRequest, root.FortanixSdkmsRestApi.EncryptUpdateRequestEx, root.FortanixSdkmsRestApi.EncryptUpdateResponse, root.FortanixSdkmsRestApi.Error);
  }
}(this, function(ApiClient, BatchDecryptRequest, BatchDecryptResponse, BatchEncryptRequest, BatchEncryptResponse, DecryptFinalRequest, DecryptFinalRequestEx, DecryptFinalResponse, DecryptInitRequest, DecryptInitRequestEx, DecryptInitResponse, DecryptRequest, DecryptRequestEx, DecryptResponse, DecryptUpdateRequest, DecryptUpdateRequestEx, DecryptUpdateResponse, EncryptFinalRequest, EncryptFinalRequestEx, EncryptFinalResponse, EncryptInitRequest, EncryptInitRequestEx, EncryptInitResponse, EncryptRequest, EncryptRequestEx, EncryptResponse, EncryptUpdateRequest, EncryptUpdateRequestEx, EncryptUpdateResponse, Error) {
  'use strict';

  /**
   * EncryptionAndDecryption service.
   * @module api/EncryptionAndDecryptionApi
   * @version 1.0.0-20181004
   */

  /**
   * Constructs a new EncryptionAndDecryptionApi. 
   * @alias module:api/EncryptionAndDecryptionApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the batchDecrypt operation.
     * @callback module:api/EncryptionAndDecryptionApi~batchDecryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDecryptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch decrypt with one or more keys
     * The data to be decrypted and the key ids to be used are provided in the request body. The decrypted plain text is returned in the response body. The ordering of the body matches the ordering of the request. An individual status code is returned for each batch item. Maximum size of the entire batch request is 512 KB. 
     * @param {module:model/BatchDecryptRequest} body Batch decryption request
     * @param {module:api/EncryptionAndDecryptionApi~batchDecryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDecryptResponse}
     */
    this.batchDecrypt = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchDecrypt");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BatchDecryptResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/batch/decrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the batchEncrypt operation.
     * @callback module:api/EncryptionAndDecryptionApi~batchEncryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchEncryptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch encrypt with one or more keys
     * The data to be encrypted and the key ids to be used are provided in the request body. The encrypted cipher text is returned in the response body. The ordering of the body matches the ordering of the request. An individual status code is returned for each batch item. Maximum size of the entire batch request is 512 KB. 
     * @param {module:model/BatchEncryptRequest} body Batch Encryption request
     * @param {module:api/EncryptionAndDecryptionApi~batchEncryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchEncryptResponse}
     */
    this.batchEncrypt = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchEncrypt");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BatchEncryptResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/batch/encrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decrypt operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decrypt data
     * Decrypt data using a symmetric or asymmetric key. For symmetric ciphers, mode (specifying the block cipher mode) is a required field. &lt;br&gt; For GCM and CCM modes, tag_len is a required field. &lt;br&gt; iv is required for symmetric ciphers and unused for asymmetric ciphers. It must contain the initialization value used when the object was encrypted. &lt;br&gt; Objects of type opaque, EC, or HMAC may not be used for encryption or decryption. &lt;br&gt; 
     * @param {String} keyId kid of security object
     * @param {module:model/DecryptRequest} body Decryption request
     * @param {module:api/EncryptionAndDecryptionApi~decryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptResponse}
     */
    this.decrypt = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling decrypt");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decrypt");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/decrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Decrypt data
     * Decrypt data using a symmetric or asymmetric key. For symmetric ciphers, mode (specifying the block cipher mode) is a required field. &lt;br&gt; For GCM and CCM modes, tag_len is a required field. &lt;br&gt; iv is required for symmetric ciphers and unused for asymmetric ciphers. It must contain the initialization value used when the object was encrypted. &lt;br&gt; Objects of type opaque, EC, or HMAC may not be used for encryption or decryption. &lt;br&gt; 
     * @param {module:model/DecryptRequestEx} body Decryption request
     * @param {module:api/EncryptionAndDecryptionApi~decryptExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptResponse}
     */
    this.decryptEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptResponse;

      return this.apiClient.callApi(
        '/crypto/v1/decrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptFinal operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptFinalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptFinalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conclude multi-part decryption
     * Conclude a multi-part decryption operation. See &#x60;decrypt/init&#x60; for details. 
     * @param {String} keyId kid of security object
     * @param {module:model/DecryptFinalRequest} body Finish multi-part decryption
     * @param {module:api/EncryptionAndDecryptionApi~decryptFinalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptFinalResponse}
     */
    this.decryptFinal = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling decryptFinal");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptFinal");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptFinalResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/decrypt/final', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptFinalEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptFinalExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptFinalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conclude multi-part decryption
     * Conclude a multi-part decryption operation. See &#x60;decrypt/init&#x60; for details. 
     * @param {module:model/DecryptFinalRequestEx} body Finish multi-part decryption
     * @param {module:api/EncryptionAndDecryptionApi~decryptFinalExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptFinalResponse}
     */
    this.decryptFinalEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptFinalEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptFinalResponse;

      return this.apiClient.callApi(
        '/crypto/v1/decrypt/final', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptInit operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptInitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptInitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin multi-part decryption
     * This API is used when decrypting more data than the client wishes to submit in a single request. It supports only symmetric ciphers and only conventional (not AEAD) modes of operation. To perform multi-part decryption, the client makes one request to the &#x60;init&#x60; resource, zero or more requests to the &#x60;update&#x60; resource, followed by one request to the &#x60;final&#x60; resource. The response to init and update requests includes a &#x60;state&#x60; field. The &#x60;state&#x60; is an opaque data blob that must be supplied unmodified by the client with the subsequent request. 
     * @param {String} keyId kid of security object
     * @param {module:model/DecryptInitRequest} body Multi-part decryption initialization request
     * @param {module:api/EncryptionAndDecryptionApi~decryptInitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptInitResponse}
     */
    this.decryptInit = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling decryptInit");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptInit");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptInitResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/decrypt/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptInitEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptInitExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptInitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin multi-part decryption
     * This API is used when decrypting more data than the client wishes to submit in a single request. It supports only symmetric ciphers and only conventional (not AEAD) modes of operation. To perform multi-part decryption, the client makes one request to the &#x60;init&#x60; resource, zero or more requests to the &#x60;update&#x60; resource, followed by one request to the &#x60;final&#x60; resource. The response to init and update requests includes a &#x60;state&#x60; field. The &#x60;state&#x60; is an opaque data blob that must be supplied unmodified by the client with the subsequent request. 
     * @param {module:model/DecryptInitRequestEx} body Multi-part decryption initialization request
     * @param {module:api/EncryptionAndDecryptionApi~decryptInitExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptInitResponse}
     */
    this.decryptInitEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptInitEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptInitResponse;

      return this.apiClient.callApi(
        '/crypto/v1/decrypt/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptUpdate operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Continue multi-part decryption
     * Continue a multi-part decryption operation. See &#x60;decrypt/init&#x60; for details. 
     * @param {String} keyId kid of security object
     * @param {module:model/DecryptUpdateRequest} body Multi-part decryption
     * @param {module:api/EncryptionAndDecryptionApi~decryptUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptUpdateResponse}
     */
    this.decryptUpdate = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling decryptUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptUpdate");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptUpdateResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/decrypt/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the decryptUpdateEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~decryptUpdateExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DecryptUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Continue multi-part decryption
     * Continue a multi-part decryption operation. See &#x60;decrypt/init&#x60; for details. 
     * @param {module:model/DecryptUpdateRequestEx} body Multi-part decryption
     * @param {module:api/EncryptionAndDecryptionApi~decryptUpdateExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DecryptUpdateResponse}
     */
    this.decryptUpdateEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling decryptUpdateEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DecryptUpdateResponse;

      return this.apiClient.callApi(
        '/crypto/v1/decrypt/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encrypt operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypt data
     * Encrypt data using a symmetric or asymmetric key. &lt;br&gt; For symmetric ciphers, mode (specifying the block cipher mode) is a required field. &lt;br&gt; For GCM and CCM modes, tag_len is a required field. &lt;br&gt; iv is optional for symmetric ciphers and unused for asymmetric ciphers. If provided, it will be used as the cipher initialization value. Length of iv must match the initialization value size for the cipher and mode. If not provided, SDKMS will create a random iv of the correct length for the cipher and mode and return this value in the response. &lt;br&gt; Objects of type Opaque, EC, or HMAC may not be used for encryption or decryption. &lt;br&gt; 
     * @param {String} keyId kid of security object
     * @param {module:model/EncryptRequest} body Encryption request
     * @param {module:api/EncryptionAndDecryptionApi~encryptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptResponse}
     */
    this.encrypt = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling encrypt");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encrypt");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/encrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypt data
     * Encrypt data using a symmetric or asymmetric key. &lt;br&gt; For symmetric ciphers, mode (specifying the block cipher mode) is a required field. &lt;br&gt; For GCM and CCM modes, tag_len is a required field. &lt;br&gt; iv is optional for symmetric ciphers and unused for asymmetric ciphers. If provided, it will be used as the cipher initialization value. Length of iv must match the initialization value size for the cipher and mode. If not provided, SDKMS will create a random iv of the correct length for the cipher and mode and return this value in the response. &lt;br&gt; Objects of type Opaque, EC, or HMAC may not be used for encryption or decryption. &lt;br&gt; 
     * @param {module:model/EncryptRequestEx} body Encryption request
     * @param {module:api/EncryptionAndDecryptionApi~encryptExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptResponse}
     */
    this.encryptEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptResponse;

      return this.apiClient.callApi(
        '/crypto/v1/encrypt', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptFinal operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptFinalCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptFinalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conclude multi-part encryption
     * Conclude a multi-part encryption operation. See &#x60;encrypt/init&#x60; for details. 
     * @param {String} keyId kid of security object
     * @param {module:model/EncryptFinalRequest} body Finish multi-part encryption
     * @param {module:api/EncryptionAndDecryptionApi~encryptFinalCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptFinalResponse}
     */
    this.encryptFinal = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling encryptFinal");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptFinal");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptFinalResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/encrypt/final', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptFinalEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptFinalExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptFinalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Conclude multi-part encryption
     * Conclude a multi-part encryption operation. See &#x60;encrypt/init&#x60; for details. 
     * @param {module:model/EncryptFinalRequestEx} body Finish multi-part encryption
     * @param {module:api/EncryptionAndDecryptionApi~encryptFinalExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptFinalResponse}
     */
    this.encryptFinalEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptFinalEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptFinalResponse;

      return this.apiClient.callApi(
        '/crypto/v1/encrypt/final', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptInit operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptInitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptInitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin multi-part encryption
     * This API is used when encrypting more data than the client wishes to submit in a single request. It supports only symmetric ciphers and only conventional (not AEAD) modes of operation. To perform multi-part encryption, the client makes one request to the &#x60;init&#x60; resource, zero or more requests to the &#x60;update&#x60; resource, followed by one request to the &#x60;final&#x60; resource. The response to init and update requests includes a &#x60;state&#x60; field. The &#x60;state&#x60; is an opaque data blob that must be supplied unmodified by the client with the subsequent request. 
     * @param {String} keyId kid of security object
     * @param {module:model/EncryptInitRequest} body Multi-part encryption initialization request
     * @param {module:api/EncryptionAndDecryptionApi~encryptInitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptInitResponse}
     */
    this.encryptInit = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling encryptInit");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptInit");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptInitResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/encrypt/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptInitEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptInitExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptInitResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin multi-part encryption
     * This API is used when encrypting more data than the client wishes to submit in a single request. It supports only symmetric ciphers and only conventional (not AEAD) modes of operation. To perform multi-part encryption, the client makes one request to the &#x60;init&#x60; resource, zero or more requests to the &#x60;update&#x60; resource, followed by one request to the &#x60;final&#x60; resource. The response to init and update requests includes a &#x60;state&#x60; field. The &#x60;state&#x60; is an opaque data blob that must be supplied unmodified by the client with the subsequent request. 
     * @param {module:model/EncryptInitRequestEx} body Multi-part encryption initialization request
     * @param {module:api/EncryptionAndDecryptionApi~encryptInitExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptInitResponse}
     */
    this.encryptInitEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptInitEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptInitResponse;

      return this.apiClient.callApi(
        '/crypto/v1/encrypt/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptUpdate operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Continue multi-part encryption
     * Continue a multi-part encryption operation. See &#x60;encrypt/init&#x60; for details. 
     * @param {String} keyId kid of security object
     * @param {module:model/EncryptUpdateRequest} body Multi-part encryption
     * @param {module:api/EncryptionAndDecryptionApi~encryptUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptUpdateResponse}
     */
    this.encryptUpdate = function(keyId, body, callback) {
      var postBody = body;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling encryptUpdate");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptUpdate");
      }


      var pathParams = {
        'key-id': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptUpdateResponse;

      return this.apiClient.callApi(
        '/crypto/v1/keys/{key-id}/encrypt/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptUpdateEx operation.
     * @callback module:api/EncryptionAndDecryptionApi~encryptUpdateExCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EncryptUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Continue multi-part encryption
     * Continue a multi-part encryption operation. See &#x60;encrypt/init&#x60; for details. 
     * @param {module:model/EncryptUpdateRequestEx} body Multi-part encryption
     * @param {module:api/EncryptionAndDecryptionApi~encryptUpdateExCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EncryptUpdateResponse}
     */
    this.encryptUpdateEx = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling encryptUpdateEx");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerToken'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = EncryptUpdateResponse;

      return this.apiClient.callApi(
        '/crypto/v1/encrypt/update', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
