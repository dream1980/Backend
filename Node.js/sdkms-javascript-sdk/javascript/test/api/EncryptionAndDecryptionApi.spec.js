/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FortanixSdkmsRestApi);
  }
}(this, function(expect, FortanixSdkmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FortanixSdkmsRestApi.EncryptionAndDecryptionApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EncryptionAndDecryptionApi', function() {
    describe('batchDecrypt', function() {
      it('should call batchDecrypt successfully', function(done) {
        //uncomment below and update the code to test batchDecrypt
        //instance.batchDecrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchEncrypt', function() {
      it('should call batchEncrypt successfully', function(done) {
        //uncomment below and update the code to test batchEncrypt
        //instance.batchEncrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decrypt', function() {
      it('should call decrypt successfully', function(done) {
        //uncomment below and update the code to test decrypt
        //instance.decrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptEx', function() {
      it('should call decryptEx successfully', function(done) {
        //uncomment below and update the code to test decryptEx
        //instance.decryptEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptFinal', function() {
      it('should call decryptFinal successfully', function(done) {
        //uncomment below and update the code to test decryptFinal
        //instance.decryptFinal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptFinalEx', function() {
      it('should call decryptFinalEx successfully', function(done) {
        //uncomment below and update the code to test decryptFinalEx
        //instance.decryptFinalEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptInit', function() {
      it('should call decryptInit successfully', function(done) {
        //uncomment below and update the code to test decryptInit
        //instance.decryptInit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptInitEx', function() {
      it('should call decryptInitEx successfully', function(done) {
        //uncomment below and update the code to test decryptInitEx
        //instance.decryptInitEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptUpdate', function() {
      it('should call decryptUpdate successfully', function(done) {
        //uncomment below and update the code to test decryptUpdate
        //instance.decryptUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('decryptUpdateEx', function() {
      it('should call decryptUpdateEx successfully', function(done) {
        //uncomment below and update the code to test decryptUpdateEx
        //instance.decryptUpdateEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encrypt', function() {
      it('should call encrypt successfully', function(done) {
        //uncomment below and update the code to test encrypt
        //instance.encrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptEx', function() {
      it('should call encryptEx successfully', function(done) {
        //uncomment below and update the code to test encryptEx
        //instance.encryptEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptFinal', function() {
      it('should call encryptFinal successfully', function(done) {
        //uncomment below and update the code to test encryptFinal
        //instance.encryptFinal(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptFinalEx', function() {
      it('should call encryptFinalEx successfully', function(done) {
        //uncomment below and update the code to test encryptFinalEx
        //instance.encryptFinalEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptInit', function() {
      it('should call encryptInit successfully', function(done) {
        //uncomment below and update the code to test encryptInit
        //instance.encryptInit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptInitEx', function() {
      it('should call encryptInitEx successfully', function(done) {
        //uncomment below and update the code to test encryptInitEx
        //instance.encryptInitEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptUpdate', function() {
      it('should call encryptUpdate successfully', function(done) {
        //uncomment below and update the code to test encryptUpdate
        //instance.encryptUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptUpdateEx', function() {
      it('should call encryptUpdateEx successfully', function(done) {
        //uncomment below and update the code to test encryptUpdateEx
        //instance.encryptUpdateEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
