/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FortanixSdkmsRestApi);
  }
}(this, function(expect, FortanixSdkmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FortanixSdkmsRestApi.PluginsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PluginsApi', function() {
    describe('createPlugin', function() {
      it('should call createPlugin successfully', function(done) {
        //uncomment below and update the code to test createPlugin
        //instance.createPlugin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePlugin', function() {
      it('should call deletePlugin successfully', function(done) {
        //uncomment below and update the code to test deletePlugin
        //instance.deletePlugin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlugin', function() {
      it('should call getPlugin successfully', function(done) {
        //uncomment below and update the code to test getPlugin
        //instance.getPlugin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPlugins', function() {
      it('should call getPlugins successfully', function(done) {
        //uncomment below and update the code to test getPlugins
        //instance.getPlugins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('invokePlugin', function() {
      it('should call invokePlugin successfully', function(done) {
        //uncomment below and update the code to test invokePlugin
        //instance.invokePlugin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sysV1PluginsInvokePluginIdGet', function() {
      it('should call sysV1PluginsInvokePluginIdGet successfully', function(done) {
        //uncomment below and update the code to test sysV1PluginsInvokePluginIdGet
        //instance.sysV1PluginsInvokePluginIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePlugin', function() {
      it('should call updatePlugin successfully', function(done) {
        //uncomment below and update the code to test updatePlugin
        //instance.updatePlugin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
