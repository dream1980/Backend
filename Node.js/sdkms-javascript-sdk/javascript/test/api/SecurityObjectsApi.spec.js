/**
 * Fortanix SDKMS REST API
 * This is a set of REST APIs for accessing the Fortanix Self-Defending Key Management System. This includes APIs for managing accounts, and for performing cryptographic and key management operations. 
 *
 * OpenAPI spec version: 1.0.0-20181004
 * Contact: support@fortanix.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FortanixSdkmsRestApi);
  }
}(this, function(expect, FortanixSdkmsRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FortanixSdkmsRestApi.SecurityObjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SecurityObjectsApi', function() {
    describe('agreeKey', function() {
      it('should call agreeKey successfully', function(done) {
        //uncomment below and update the code to test agreeKey
        //instance.agreeKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePrivateKey', function() {
      it('should call deletePrivateKey successfully', function(done) {
        //uncomment below and update the code to test deletePrivateKey
        //instance.deletePrivateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSecurityObject', function() {
      it('should call deleteSecurityObject successfully', function(done) {
        //uncomment below and update the code to test deleteSecurityObject
        //instance.deleteSecurityObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deriveKey', function() {
      it('should call deriveKey successfully', function(done) {
        //uncomment below and update the code to test deriveKey
        //instance.deriveKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deriveKeyEx', function() {
      it('should call deriveKeyEx successfully', function(done) {
        //uncomment below and update the code to test deriveKeyEx
        //instance.deriveKeyEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateSecurityObject', function() {
      it('should call generateSecurityObject successfully', function(done) {
        //uncomment below and update the code to test generateSecurityObject
        //instance.generateSecurityObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityObject', function() {
      it('should call getSecurityObject successfully', function(done) {
        //uncomment below and update the code to test getSecurityObject
        //instance.getSecurityObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityObjectDigest', function() {
      it('should call getSecurityObjectDigest successfully', function(done) {
        //uncomment below and update the code to test getSecurityObjectDigest
        //instance.getSecurityObjectDigest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityObjectValue', function() {
      it('should call getSecurityObjectValue successfully', function(done) {
        //uncomment below and update the code to test getSecurityObjectValue
        //instance.getSecurityObjectValue(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityObjectValueEx', function() {
      it('should call getSecurityObjectValueEx successfully', function(done) {
        //uncomment below and update the code to test getSecurityObjectValueEx
        //instance.getSecurityObjectValueEx(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSecurityObjects', function() {
      it('should call getSecurityObjects successfully', function(done) {
        //uncomment below and update the code to test getSecurityObjects
        //instance.getSecurityObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importSecurityObject', function() {
      it('should call importSecurityObject successfully', function(done) {
        //uncomment below and update the code to test importSecurityObject
        //instance.importSecurityObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('persistSecurityObject', function() {
      it('should call persistSecurityObject successfully', function(done) {
        //uncomment below and update the code to test persistSecurityObject
        //instance.persistSecurityObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSecurityObject', function() {
      it('should call updateSecurityObject successfully', function(done) {
        //uncomment below and update the code to test updateSecurityObject
        //instance.updateSecurityObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
